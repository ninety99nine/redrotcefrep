<?php

namespace App\Http\Requests\Order;

use App\Models\Order;
use App\Enums\TaxMethod;
use App\Enums\OrderStatus;
use Illuminate\Support\Arr;
use Illuminate\Validation\Rule;
use App\Enums\OrderPaymentStatus;
use Illuminate\Foundation\Http\FormRequest;

class CreateOrderRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     *
     * @return bool
     */
    public function authorize(): bool
    {
        return $this->user()->can('create', Order::class);
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array
     */
    public function rules(): array
    {
        return [
            'summary' => ['nullable', 'string', 'max:255'],
            'status' => ['nullable', Rule::enum(OrderStatus::class)],
            'currency' => ['nullable', 'string', 'size:3'],
            'subtotal' => ['nullable', 'numeric', 'min:0'],
            'discount_total' => ['nullable', 'numeric', 'min:0'],
            'subtotal_after_discount' => ['nullable', 'numeric', 'min:0'],
            'vat_method' => ['nullable', Rule::enum(TaxMethod::class)],
            'vat_rate' => ['nullable', 'numeric', 'min:0', 'max:99.99'],
            'vat_amount' => ['nullable', 'numeric', 'min:0'],
            'fee_total' => ['nullable', 'numeric', 'min:0'],
            'adjustment_total' => ['nullable', 'numeric'],
            'grand_total' => ['nullable', 'numeric', 'min:0'],
            'payment_status' => ['nullable', Rule::enum(OrderPaymentStatus::class)],
            'paid_total' => ['nullable', 'numeric', 'min:0'],
            'paid_percentage' => ['nullable', 'integer', 'min:0', 'max:100'],
            'pending_total' => ['nullable', 'numeric', 'min:0'],
            'pending_percentage' => ['nullable', 'integer', 'min:0', 'max:100'],
            'outstanding_total' => ['nullable', 'numeric', 'min:0'],
            'outstanding_percentage' => ['nullable', 'integer', 'min:0', 'max:100'],
            'total_products' => ['nullable', 'integer', 'min:0', 'max:65535'],
            'total_cancelled_products' => ['nullable', 'integer', 'min:0', 'max:65535'],
            'total_uncancelled_products' => ['nullable', 'integer', 'min:0', 'max:65535'],
            'total_product_quantities' => ['nullable', 'integer', 'min:0', 'max:65535'],
            'total_cancelled_product_quantities' => ['nullable', 'integer', 'min:0', 'max:65535'],
            'total_uncancelled_product_quantities' => ['nullable', 'integer', 'min:0', 'max:65535'],
            'total_promotions' => ['nullable', 'integer', 'min:0', 'max:65535'],
            'total_cancelled_promotions' => ['nullable', 'integer', 'min:0', 'max:65535'],
            'total_uncancelled_promotions' => ['nullable', 'integer', 'min:0', 'max:65535'],
            'applied_promotion_code' => ['nullable', 'boolean'],
            'delivery_method_name' => ['nullable', 'string', 'max:255'],
            'free_delivery' => ['nullable', 'boolean'],
            'delivery_date' => ['nullable', 'date'],
            'delivery_timeslot' => ['nullable', 'string', 'max:255'],
            'delivery_method_id' => ['nullable', 'uuid', 'exists:delivery_methods,id'],
            'delivery_distance_value' => ['nullable', 'numeric', 'min:0'],
            'delivery_distance_unit' => ['nullable', 'string', 'max:50'],
            'delivery_distance_text' => ['nullable', 'string', 'max:255'],
            'delivery_duration_value' => ['nullable', 'numeric', 'min:0'],
            'delivery_duration_text' => ['nullable', 'string', 'max:255'],
            'delivery_weight_value' => ['nullable', 'numeric', 'min:0'],
            'delivery_weight_unit' => ['nullable', 'string', 'max:50'],
            'delivery_weight_text' => ['nullable', 'string', 'max:255'],
            'courier_id' => ['nullable', 'uuid', 'exists:couriers,id'],
            'tracking_number' => ['nullable', 'string', 'max:255'],
            'collection_code' => ['nullable', 'string', 'size:6'],
            'collection_qr_code' => ['nullable', 'string', 'max:255'],
            'collection_code_expires_at' => ['nullable', 'date'],
            'collection_verified' => ['nullable', 'boolean'],
            'collection_verified_at' => ['nullable', 'date'],
            'collection_verified_by_user_id' => ['nullable', 'uuid', 'exists:users,id'],
            'collection_note' => ['nullable', 'string'],
            'cancellation_reason' => ['nullable', 'string', 'max:255'],
            'cancelled_at' => ['nullable', 'date'],
            'customer_first_name' => ['required', 'string', 'max:255'],
            'customer_last_name' => ['nullable', 'string', 'max:255'],
            'customer_mobile_number' => ['nullable', 'string', 'max:20'],
            'customer_email' => ['nullable', 'email', 'max:255'],
            'customer_note' => ['nullable', 'string'],
            'customer_id' => ['nullable', 'uuid', 'exists:customers,id'],
            'placed_by_user_id' => ['nullable', 'uuid', 'exists:users,id'],
            'total_views_by_team' => ['nullable', 'integer', 'min:0', 'max:65535'],
            'first_viewed_by_team_at' => ['nullable', 'date'],
            'last_viewed_by_team_at' => ['nullable', 'date'],
            'internal_note' => ['nullable', 'string'],
            'remark' => ['nullable', 'string'],
            'store_id' => ['required', 'uuid', 'exists:stores,id'],
            'created_by_user_id' => ['nullable', 'uuid', 'exists:users,id'],
            'assigned_to_user_id' => ['nullable', 'uuid', 'exists:users,id'],
        ];
    }

    /**
     * Get custom messages for validation errors.
     *
     * @return array
     */
    public function messages(): array
    {
        return [
            'summary.string' => 'The summary must be a string.',
            'summary.max' => 'The summary must not exceed 255 characters.',
            'status.enum' => 'The status must be one of: ' . Arr::join(OrderStatus::values(), ',', 'or'),
            'currency.string' => 'The currency must be a string.',
            'currency.size' => 'The currency must be exactly 3 characters.',
            'subtotal.numeric' => 'The subtotal must be a number.',
            'subtotal.min' => 'The subtotal must be at least 0.',
            'discount_total.numeric' => 'The discount total must be a number.',
            'discount_total.min' => 'The discount total must be at least 0.',
            'subtotal_after_discount.numeric' => 'The subtotal after discount must be a number.',
            'subtotal_after_discount.min' => 'The subtotal after discount must be at least 0.',
            'vat_method.enum' => 'The VAT method must be one of: ' . Arr::join(TaxMethod::values(), ',', 'or'),
            'vat_rate.numeric' => 'The VAT rate must be a number.',
            'vat_rate.min' => 'The VAT rate must be at least 0.',
            'vat_rate.max' => 'The VAT rate must not exceed 99.99.',
            'vat_amount.numeric' => 'The VAT amount must be a number.',
            'vat_amount.min' => 'The VAT amount must be at least 0.',
            'fee_total.numeric' => 'The fee total must be a number.',
            'fee_total.min' => 'The fee total must be at least 0.',
            'adjustment_total.numeric' => 'The adjustment total must be a number.',
            'grand_total.numeric' => 'The grand total must be a number.',
            'grand_total.min' => 'The grand total must be at least 0.',
            'payment_status.enum' => 'The payment status must be one of: ' . Arr::join(OrderPaymentStatus::values(), ',', 'or'),
            'paid_total.numeric' => 'The paid total must be a number.',
            'paid_total.min' => 'The paid total must be at least 0.',
            'paid_percentage.integer' => 'The paid percentage must be an integer.',
            'paid_percentage.min' => 'The paid percentage must be at least 0.',
            'paid_percentage.max' => 'The paid percentage must not exceed 100.',
            'pending_total.numeric' => 'The pending total must be a number.',
            'pending_total.min' => 'The pending total must be at least 0.',
            'pending_percentage.integer' => 'The pending percentage must be an integer.',
            'pending_percentage.min' => 'The pending percentage must be at least 0.',
            'pending_percentage.max' => 'The pending percentage must not exceed 100.',
            'outstanding_total.numeric' => 'The outstanding total must be a number.',
            'outstanding_total.min' => 'The outstanding total must be at least 0.',
            'outstanding_percentage.integer' => 'The outstanding percentage must be an integer.',
            'outstanding_percentage.min' => 'The outstanding percentage must be at least 0.',
            'outstanding_percentage.max' => 'The outstanding percentage must not exceed 100.',
            'total_products.integer' => 'The total products must be an integer.',
            'total_products.min' => 'The total products must be at least 0.',
            'total_products.max' => 'The total products must not exceed 65535.',
            'total_cancelled_products.integer' => 'The total cancelled products must be an integer.',
            'total_cancelled_products.min' => 'The total cancelled products must be at least 0.',
            'total_cancelled_products.max' => 'The total cancelled products must not exceed 65535.',
            'total_uncancelled_products.integer' => 'The total uncancelled products must be an integer.',
            'total_uncancelled_products.min' => 'The total uncancelled products must be at least 0.',
            'total_uncancelled_products.max' => 'The total uncancelled products must not exceed 65535.',
            'total_product_quantities.integer' => 'The total product quantities must be an integer.',
            'total_product_quantities.min' => 'The total product quantities must be at least 0.',
            'total_product_quantities.max' => 'The total product quantities must not exceed 65535.',
            'total_cancelled_product_quantities.integer' => 'The total cancelled product quantities must be an integer.',
            'total_cancelled_product_quantities.min' => 'The total cancelled product quantities must be at least 0.',
            'total_cancelled_product_quantities.max' => 'The total cancelled product quantities must not exceed 65535.',
            'total_uncancelled_product_quantities.integer' => 'The total uncancelled product quantities must be an integer.',
            'total_uncancelled_product_quantities.min' => 'The total uncancelled product quantities must be at least 0.',
            'total_uncancelled_product_quantities.max' => 'The total uncancelled product quantities must not exceed 65535.',
            'total_promotions.integer' => 'The total promotions must be an integer.',
            'total_promotions.min' => 'The total promotions must be at least 0.',
            'total_promotions.max' => 'The total promotions must not exceed 65535.',
            'total_cancelled_promotions.integer' => 'The total cancelled promotions must be an integer.',
            'total_cancelled_promotions.min' => 'The total cancelled promotions must be at least 0.',
            'total_cancelled_promotions.max' => 'The total cancelled promotions must not exceed 65535.',
            'total_uncancelled_promotions.integer' => 'The total uncancelled promotions must be an integer.',
            'total_uncancelled_promotions.min' => 'The total uncancelled promotions must be at least 0.',
            'total_uncancelled_promotions.max' => 'The total uncancelled promotions must not exceed 65535.',
            'applied_promotion_code.boolean' => 'The applied promotion code must be a boolean.',
            'delivery_method_name.string' => 'The delivery method name must be a string.',
            'delivery_method_name.max' => 'The delivery method name must not exceed 255 characters.',
            'free_delivery.boolean' => 'The free delivery must be a boolean.',
            'delivery_date.date' => 'The delivery date must be a valid date.',
            'delivery_timeslot.string' => 'The delivery timeslot must be a string.',
            'delivery_timeslot.max' => 'The delivery timeslot must not exceed 255 characters.',
            'delivery_method_id.uuid' => 'The delivery method ID must be a valid UUID.',
            'delivery_method_id.exists' => 'The specified delivery method does not exist.',
            'delivery_distance_value.numeric' => 'The delivery distance value must be a number.',
            'delivery_distance_value.min' => 'The delivery distance value must be at least 0.',
            'delivery_distance_unit.string' => 'The delivery distance unit must be a string.',
            'delivery_distance_unit.max' => 'The delivery distance unit must not exceed 50 characters.',
            'delivery_distance_text.string' => 'The delivery distance text must be a string.',
            'delivery_distance_text.max' => 'The delivery distance text must not exceed 255 characters.',
            'delivery_duration_value.numeric' => 'The delivery duration value must be a number.',
            'delivery_duration_value.min' => 'The delivery duration value must be at least 0.',
            'delivery_duration_text.string' => 'The delivery duration text must be a string.',
            'delivery_duration_text.max' => 'The delivery duration text must not exceed 255 characters.',
            'delivery_weight_value.numeric' => 'The delivery weight value must be a number.',
            'delivery_weight_value.min' => 'The delivery weight value must be at least 0.',
            'delivery_weight_unit.string' => 'The delivery weight unit must be a string.',
            'delivery_weight_unit.max' => 'The delivery weight unit must not exceed 50 characters.',
            'delivery_weight_text.string' => 'The delivery weight text must be a string.',
            'delivery_weight_text.max' => 'The delivery weight text must not exceed 255 characters.',
            'courier_id.uuid' => 'The courier ID must be a valid UUID.',
            'courier_id.exists' => 'The specified courier does not exist.',
            'tracking_number.string' => 'The tracking number must be a string.',
            'tracking_number.max' => 'The tracking number must not exceed 255 characters.',
            'collection_code.string' => 'The collection code must be a string.',
            'collection_code.size' => 'The collection code must be exactly 6 characters.',
            'collection_qr_code.string' => 'The collection QR code must be a string.',
            'collection_qr_code.max' => 'The collection QR code must not exceed 255 characters.',
            'collection_code_expires_at.date' => 'The collection code expiration must be a valid date.',
            'collection_verified.boolean' => 'The collection verified must be a boolean.',
            'collection_verified_at.date' => 'The collection verified date must be a valid date.',
            'collection_verified_by_user_id.uuid' => 'The collection verified by user ID must be a valid UUID.',
            'collection_verified_by_user_id.exists' => 'The specified collection verified by user does not exist.',
            'collection_note.string' => 'The collection note must be a string.',
            'cancellation_reason.string' => 'The cancellation reason must be a string.',
            'cancellation_reason.max' => 'The cancellation reason must not exceed 255 characters.',
            'cancelled_at.date' => 'The cancelled at must be a valid date.',
            'customer_first_name.required' => 'The customer first name is required.',
            'customer_first_name.string' => 'The customer first name must be a string.',
            'customer_first_name.max' => 'The customer first name must not exceed 255 characters.',
            'customer_last_name.string' => 'The customer last name must be a string.',
            'customer_last_name.max' => 'The customer last name must not exceed 255 characters.',
            'customer_mobile_number.string' => 'The customer mobile number must be a string.',
            'customer_mobile_number.max' => 'The customer mobile number must not exceed 20 characters.',
            'customer_email.email' => 'The customer email must be a valid email address.',
            'customer_email.max' => 'The customer email must not exceed 255 characters.',
            'customer_note.string' => 'The customer note must be a string.',
            'customer_id.uuid' => 'The customer ID must be a valid UUID.',
            'customer_id.exists' => 'The specified customer does not exist.',
            'placed_by_user_id.uuid' => 'The placed by user ID must be a valid UUID.',
            'placed_by_user_id.exists' => 'The specified placed by user does not exist.',
            'total_views_by_team.integer' => 'The total views by team must be an integer.',
            'total_views_by_team.min' => 'The total views by team must be at least 0.',
            'total_views_by_team.max' => 'The total views by team must not exceed 65535.',
            'first_viewed_by_team_at.date' => 'The first viewed by team date must be a valid date.',
            'last_viewed_by_team_at.date' => 'The last viewed by team date must be a valid date.',
            'internal_note.string' => 'The internal note must be a string.',
            'remark.string' => 'The remark must be a string.',
            'store_id.required' => 'The store ID is required.',
            'store_id.uuid' => 'The store ID must be a valid UUID.',
            'store_id.exists' => 'The specified store does not exist.',
            'created_by_user_id.uuid' => 'The created by user ID must be a valid UUID.',
            'created_by_user_id.exists' => 'The specified created by user does not exist.',
            'assigned_to_user_id.uuid' => 'The assigned to user ID must be a valid UUID.',
            'assigned_to_user_id.exists' => 'The specified assigned to user does not exist.',
        ];
    }
}
